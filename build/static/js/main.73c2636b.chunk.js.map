{"version":3,"sources":["ChatBot.js","Animation/Animator.js","HomePage.js","App.js","serviceWorker.js","index.js"],"names":["ChatBot","props","d","m","s","document","createElement","type","async","src","getElementsByTagName","appendChild","window","kommunicate","_globals","appId","process","popupWidget","automaticChatOpenOnNavigation","Component","Animator","defaultOptions","loop","autoplay","playbackSpeed","animationData","LoadingData","rendererSettings","preserveAspectRatio","className","options","height","width","HomePage","alt","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MA0BeA,E,YAxBb,WAAYC,GAAQ,qEACZA,I,kFAGN,SAAWC,EAAGC,GACZ,IAKIC,EAAIC,SAASC,cAAc,UAC/BF,EAAEG,KAAO,kBACTH,EAAEI,OAAQ,EACVJ,EAAEK,IAAM,mDACAJ,SAASK,qBAAqB,QAAQ,GAC5CC,YAAYP,GACdQ,OAAOC,YAAcV,EACrBA,EAAEW,SAZwB,CACxBC,MAAOC,mCACPC,aAAa,EACbC,+BAA+B,GAJnC,CAcGb,SAAUO,OAAOC,aAAe,M,+BAGnC,OAAO,kC,GAtBWM,a,yBCuBPC,EApBE,SAACnB,GAChB,IAAMoB,EAAiB,CACrBC,MAAM,EACNC,UAAU,EACVC,cAAe,EACfC,cAAeC,EACfC,iBAAkB,CAChBC,oBAAqB,mBAIzB,OACE,yBAAKC,UAAU,oBACb,yBAAKA,UAAU,UACb,kBAAC,IAAD,CAAQC,QAAST,EAAgBU,OAAQ,IAAKC,MAAO,SCE9CC,EAjBE,WACf,OACE,yBAAKJ,UAAU,WACb,yBAAKpB,IAAI,WAAWyB,IAAI,UAAUL,UAAU,SAC5C,kBAAC,EAAD,MACA,yBAAKA,UAAU,QACb,wBAAIA,UAAU,UAAd,qBACA,wBAAIA,UAAU,aAAd,mFAEY,6BAFZ,4BAGE,6BAHF,4BAGiC,uCCA1BM,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIcC,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpC,SAASqC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.73c2636b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nclass ChatBot extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  componentDidMount() {\r\n    (function (d, m) {\r\n      var kommunicateSettings = {\r\n        appId: process.env.REACT_APP_ID,\r\n        popupWidget: true,\r\n        automaticChatOpenOnNavigation: true,\r\n      };\r\n      var s = document.createElement(\"script\");\r\n      s.type = \"text/javascript\";\r\n      s.async = true;\r\n      s.src = \"https://widget.kommunicate.io/v2/kommunicate.app\";\r\n      var h = document.getElementsByTagName(\"head\")[0];\r\n      h.appendChild(s);\r\n      window.kommunicate = m;\r\n      m._globals = kommunicateSettings;\r\n    })(document, window.kommunicate || {});\r\n  }\r\n  render() {\r\n    return <div></div>;\r\n  }\r\n}\r\nexport default ChatBot;\r\n","import React from \"react\";\r\nimport Lottie from \"react-lottie\";\r\nimport LoadingData from \"./10244-balls-bounce.json\";\r\n\r\nconst Animator = (props) => {\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    playbackSpeed: 2,\r\n    animationData: LoadingData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\">\r\n        <Lottie options={defaultOptions} height={250} width={250} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Animator;\r\n","import React from \"react\";\r\nimport Animator from \"./Animation/Animator\";\r\n\r\nconst HomePage = () => {\r\n  return (\r\n    <div className=\"section\">\r\n      <img src=\"logo.png\" alt=\"sportee\" className=\"logo\" />\r\n      <Animator />\r\n      <div className=\"text\">\r\n        <h1 className=\"header\">Book A Ticket Now</h1>\r\n        <h5 className=\"subheader\">\r\n          I am that friend that can get you into any sports event you ever want\r\n          to go to. <br /> I am also a good talker.\r\n          <br /> It begins with a simple <b>'Hi'</b>\r\n        </h5>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport ChatBot from \"./ChatBot\";\r\nimport HomePage from \"./HomePage\";\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <HomePage />\r\n      <ChatBot />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}